---
import Header from "../components/Header.astro";
import Footer from "../components/Footer.astro";
import MobileNavDialog from "../components/MobileNavDialog.astro";
import SnakeDialog from "../components/SnakeDialog.astro";
import "../styles/global.css";
import "../styles/tailwind.css";

const { pageTitle, heading } = Astro.props;
const meta = Astro.props.meta || {};
const origin = Astro.site.origin;
---

<html lang="en" class="css-transitions-only-after-page-load">
    <head>
        <meta charset="utf-8" />

        <link
            rel="apple-touch-icon"
            sizes="180x180"
            href="/apple-touch-icon.png"
        />

        <link
            rel="icon"
            type="image/png"
            sizes="32x32"
            href="/favicon-32x32.png"
        />

        <link
            rel="icon"
            type="image/png"
            sizes="16x16"
            href="/favicon-16x16.png"
        />

        <link rel="manifest" href="/site.webmanifest" />

        <link rel="preconnect" href="https://fonts.googleapis.com" />
        <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />

        <link
            href="https://fonts.googleapis.com/css2?family=Karla:ital,wght@0,400..700;1,400..700&family=Merriweather:wght@700&display=swap"
            rel="stylesheet"
        />

        <meta name="viewport" content="width=device-width" />
        <meta name="generator" content={Astro.generator} />

        <meta name="theme-color" content="rgb(247, 247, 247)" />

        <meta property="og:title" content={meta.title || "Oliwer Iwanicki"} />

        <meta
            property="og:description"
            content={meta.description || "Oliwer Iwanicki's personal website"}
        />

        {
            meta.image && (
                <>
                    <meta
                        property="og:image"
                        content={`${origin}${meta.image.url}`}
                    />

                    <meta property="og:image:alt" content={meta.image.alt} />
                </>
            )
        }

        <meta name="twitter:card" content="summary" />

        <meta
            property="twitter:title"
            content={meta.title || "Oliwer Iwanicki"}
        />

        <meta
            property="twitter:description"
            content={meta.description || "Oliwer Iwanicki's personal website"}
        />

        {
            meta.image && (
                <>
                    <meta
                        property="twitter:image"
                        content={`${origin}${meta.image.url}`}
                    />

                    <meta
                        property="twitter:image:alt"
                        content={meta.image.alt}
                    />
                </>
            )
        }

        <meta name="twitter:site" content="@oliwerin" />

        <title>{pageTitle}</title>
    </head>
    <body>
        <Header />
        <main>
            <h1>{heading}</h1>
            <slot />
        </main>
        <Footer />
        <MobileNavDialog />
        <SnakeDialog />

        <script>
            import "../scripts/menu.js";
        </script>
    </body>
</html>

<script is:inline>
    const switchToDark = () => {
        document.documentElement.classList.add("dark");

        document
            .querySelector("meta[name='theme-color']")
            .setAttribute("content", "rgb(57, 62, 70)");

        document
            .querySelector("link[href='/apple-touch-icon.png']")
            .setAttribute("href", "/apple-touch-icon-dark.png");

        document
            .querySelector("link[href='/favicon-32x32.png']")
            .setAttribute("href", "/favicon-32x32-dark.png");

        document
            .querySelector("link[href='/favicon-16x16.png']")
            .setAttribute("href", "/favicon-16x16-dark.png");

        document
            .querySelector("link[href='/site.webmanifest']")
            .setAttribute("href", "/site.webmanifest-dark");
    };

    const switchToLight = () => {
        document.documentElement.classList.remove("dark");

        document
            .querySelector("meta[name='theme-color']")
            .setAttribute("content", "rgb(247, 247, 247)");

        document
            .querySelector("link[href='/apple-touch-icon-dark.png']")
            .setAttribute("href", "/apple-touch-icon.png");

        document
            .querySelector("link[href='/favicon-32x32-dark.png']")
            .setAttribute("href", "/favicon-32x32.png");

        document
            .querySelector("link[href='/favicon-16x16-dark.png']")
            .setAttribute("href", "/favicon-16x16.png");

        document
            .querySelector("link[href='/site.webmanifest-dark']")
            .setAttribute("href", "/site.webmanifest");
    };

    const theme = (() => {
        if (
            typeof localStorage !== "undefined" &&
            localStorage.getItem("theme")
        ) {
            return localStorage.getItem("theme");
        }
        if (window.matchMedia("(prefers-color-scheme: dark)").matches) {
            return "dark";
        }
        return "light";
    })();

    if (
        theme === "light" &&
        document.documentElement.classList.contains("dark")
    ) {
        switchToLight();
    } else if (
        theme === "dark" &&
        !document.documentElement.classList.contains("dark")
    ) {
        switchToDark();
    }

    window.localStorage.setItem("theme", theme);

    const element = document.documentElement;
    const themeButtons = document.querySelectorAll("button[data-theme-button]");

    const handleToggleClick = (event) => {
        if (element.classList.contains("dark")) {
            switchToLight();
        } else {
            switchToDark();
        }

        const isDark = element.classList.contains("dark");
        localStorage.setItem("theme", isDark ? "dark" : "light");
    };

    [...themeButtons].forEach((button) => {
        button.addEventListener("click", handleToggleClick);
    });
</script>

<script>
    document.addEventListener("DOMContentLoaded", (event) => {
        setTimeout(() => {
            document.documentElement.classList.remove(
                "css-transitions-only-after-page-load",
            );
        }, 200);
    });
</script>
